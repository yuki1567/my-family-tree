'use strict';

const types = require('@typescript-eslint/types');
const utils = require('@typescript-eslint/utils');

function createRule(rule) {
  const _createRule = utils.ESLintUtils.RuleCreator(
    (name) => `https://eslint.nuxt.com/packages/plugin#nuxt${name}`
  );
  return _createRule(rule);
}

const processSuffixes = /* @__PURE__ */ new Set([
  "client",
  "browser",
  "server",
  "nitro",
  "dev",
  "test",
  "prerender"
]);
const rule = createRule({
  name: "prefer-import-meta",
  meta: {
    type: "suggestion",
    docs: {
      description: "Prefer using `import.meta.*` over `process.*`"
    },
    schema: [],
    messages: {
      default: "Replace `process.{{ suffix }}` with `import.meta.{{ suffix }}`."
    },
    fixable: "code"
  },
  defaultOptions: [],
  create: (context) => ({
    MemberExpression: (node) => {
      if (node.object.type === types.AST_NODE_TYPES.Identifier && node.object.name === "process" && node.property.type === types.AST_NODE_TYPES.Identifier && processSuffixes.has(node.property.name)) {
        const suffix = node.property.name;
        context.report({
          node,
          messageId: "default",
          data: {
            suffix
          },
          fix: (fixer) => fixer.replaceText(node, `import.meta.${suffix}`)
        });
      }
    }
  })
});

const rules = {
  "prefer-import-meta": rule
};

const index = {
  meta: {
    name: "@nuxt/eslint-plugin"
  },
  rules
};

module.exports = index;
