import { d as distDir } from './shared/test-utils.CaqvQLs_.mjs';
export { b as buildFixture, c as createBrowser, a as createPage, e as createTest, g as getBrowser, l as loadFixture, f as setup, s as setupMaps, w as waitForHydration } from './shared/test-utils.CaqvQLs_.mjs';
import { u as useTestContext } from './shared/test-utils.ClQ9CUdo.mjs';
export { $ as $fetch, c as createTestContext, e as exposeContextToEnv, f as fetch, i as isDev, r as recoverContextFromEnv, s as setTestContext, a as startServer, b as stopServer, d as url } from './shared/test-utils.ClQ9CUdo.mjs';
import { consola } from 'consola';
import { resolve } from 'pathe';
import 'node:fs';
import 'node:path';
import 'defu';
import '@nuxt/kit';
import 'node:url';
import 'tinyexec';
import 'get-port-please';
import 'ofetch';
import 'ufo';

function mockFn() {
  const ctx = useTestContext();
  return ctx.mockFn;
}
function mockLogger() {
  const mocks = {};
  consola.mockTypes((type) => {
    mocks[type] = mockFn();
    return mocks[type];
  });
  return mocks;
}

const RunTestDefaults = {
  runner: "vitest",
  globalSetup: true
};
async function runTests(opts) {
  opts = { ...RunTestDefaults, ...opts };
  if (opts.runner !== "vitest") {
    throw new Error(`Unsupported runner: ${opts.runner}. Currently only vitest runner is supported.`);
  }
  if (opts.dev) {
    process.env.NUXT_TEST_DEV = "true";
  }
  process.env.NUXT_TEST_OPTIONS = JSON.stringify(opts);
  const { startVitest } = await import('vitest/node');
  const succeeded = await startVitest(
    "test",
    [],
    // Vitest options
    {
      root: opts.rootDir,
      run: !opts.watch,
      deps: {
        inline: [/@nuxt\/test-utils/]
      }
    },
    // Vite options
    {
      esbuild: {
        tsconfigRaw: "{}"
      },
      test: {
        dir: opts.rootDir,
        deps: {
          inline: [
            distDir,
            "@nuxt/test-utils",
            "@nuxt/test-utils-nightly",
            "@nuxt/test-utils-edge"
          ]
        },
        globals: true,
        globalSetup: [
          ...opts.globalSetup ? [resolve(distDir, "./runtime/global-setup")] : []
        ]
      }
    }
  );
  if (!succeeded) {
    process.exit(1);
  }
}

export { mockFn, mockLogger, runTests, useTestContext };
