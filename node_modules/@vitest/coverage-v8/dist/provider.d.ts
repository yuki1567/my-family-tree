import { CoverageMap } from 'istanbul-lib-coverage';
import { BaseCoverageProvider } from 'vitest/coverage';
import { Vitest } from 'vitest/node';
import { CoverageProvider, AfterSuiteRunMeta, ReportContext, ResolvedCoverageOptions } from 'vitest';

interface TestExclude {
    new (opts: {
        cwd?: string | string[];
        include?: string | string[];
        exclude?: string | string[];
        extension?: string | string[];
        excludeNodeModules?: boolean;
        relativePath?: boolean;
    }): {
        shouldInstrument: (filePath: string) => boolean;
        glob: (cwd: string) => Promise<string[]>;
    };
}
type Options = ResolvedCoverageOptions<'v8'>;
/**
 * Holds info about raw coverage results that are stored on file system:
 *
 * ```json
 * "project-a": {
 *   "web": {
 *     "tests/math.test.ts": "coverage-1.json",
 *     "tests/utils.test.ts": "coverage-2.json",
 * //                          ^^^^^^^^^^^^^^^ Raw coverage on file system
 *   },
 *   "ssr": { ... },
 *   "browser": { ... },
 * },
 * "project-b": ...
 * ```
 */
type CoverageFiles = Map<NonNullable<AfterSuiteRunMeta['projectName']> | typeof DEFAULT_PROJECT, Record<AfterSuiteRunMeta['transformMode'], {
    [TestFilenames: string]: string;
}>>;
declare const DEFAULT_PROJECT: unique symbol;
declare class V8CoverageProvider extends BaseCoverageProvider implements CoverageProvider {
    name: string;
    ctx: Vitest;
    options: Options;
    testExclude: InstanceType<TestExclude>;
    coverageFiles: CoverageFiles;
    coverageFilesDirectory: string;
    pendingPromises: Promise<void>[];
    initialize(ctx: Vitest): void;
    resolveOptions(): Options;
    clean(clean?: boolean): Promise<void>;
    onAfterSuiteRun({ coverage, transformMode, projectName, testFiles }: AfterSuiteRunMeta): void;
    generateCoverage({ allTestsRun }: ReportContext): Promise<CoverageMap>;
    reportCoverage(coverageMap: unknown, { allTestsRun }: ReportContext): Promise<void>;
    private cleanAfterRun;
    onTestFailure(): Promise<void>;
    generateReports(coverageMap: CoverageMap, allTestsRun?: boolean): Promise<void>;
    mergeReports(coverageMaps: unknown[]): Promise<void>;
    private getUntestedFiles;
    private getSources;
    private convertCoverage;
}

export { V8CoverageProvider };
