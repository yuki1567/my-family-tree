'use strict';

const node_fs = require('node:fs');
const fs = require('node:fs/promises');
const ohash = require('ohash');
const core = require('./core.cjs');
require('json-schema-to-typescript-lite');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

const version = "0.3.2";

async function typegen(configs, options = {}) {
  const {
    includeCoreRules = true,
    dtsPath = "eslint-typegen.d.ts"
  } = options;
  const resolved = await configs;
  let configsInput = resolved;
  if (includeCoreRules) {
    const { builtinRules } = await import('eslint/use-at-your-own-risk');
    configsInput = [
      {
        plugins: {
          "": { rules: Object.fromEntries(builtinRules.entries()) }
        }
      },
      ...configsInput
    ];
  }
  const plugins = await core.flatConfigsToPlugins(configsInput, options);
  const configNames = configsInput.flatMap((c) => c.name).filter(Boolean);
  const hashSource = [
    // version of eslint-typegen
    version,
    // plugins name and version
    ...Object.entries(plugins).map(([n, p]) => [p.meta?.name, p.meta?.version].filter(Boolean).join("@") || p.name || n).sort(),
    // config names
    ...configNames
  ].join(" ");
  const hash = ohash.hash(hashSource);
  const previousHash = node_fs.existsSync(dtsPath) ? (await fs__default.readFile(dtsPath, "utf-8")).match(/\/\* eslint-typegen-hash: (\S*) \*\//)?.[1]?.trim() : void 0;
  if (previousHash !== hash) {
    const dts = [
      "/* This file is generated by eslint-typegen, for augmenting rules types in ESLint */",
      "/* You might want to include this file in tsconfig.json but excluded from git */",
      `/* eslint-typegen-hash: ${hash} */`,
      "",
      await core.pluginsToRulesDTS(plugins, {
        ...options,
        configNames
      })
    ].join("\n");
    fs__default.writeFile(dtsPath, dts, "utf-8");
  }
  return resolved;
}

module.exports = typegen;
